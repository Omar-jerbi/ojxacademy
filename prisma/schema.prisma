generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model groups {
  id        Int         @id @default(autoincrement())
  schedule  Json
  lessons   lessons[]
  students  students[]
  nextmonth nextmonth[]
}

model students {
  id         Int      @id @default(autoincrement())
  name       String?
  familyname String?
  schedule   Json?
  email      String
  pw         String
  groupId    Int?
  oktochange Boolean? @default(false) ////////////

  lessons   lessons[]
  payments  payments[]
  group     groups?     @relation(fields: [groupId], references: [id])
  token     tokens?
  nextmonth nextmonth[]
}

model payments {
  id        Int      @id @default(autoincrement())
  value     Decimal
  date      DateTime @default(now())
  studentId Int

  student students @relation(fields: [studentId], references: [id])

  monthId Int
  month   nextmonth @relation(fields: [monthId], references: [id])
}

model nextmonth {
  id       Int      @id @default(autoincrement())
  schedule Json?
  from     DateTime @default(now())
  to       DateTime @default(now())
  ignore   Boolean  @default(false)

  single_studentId Int?
  single_student   students? @relation(fields: [single_studentId], references: [id])

  groupsId Int?
  group    groups? @relation(fields: [groupsId], references: [id])

  payments payments[]
}

model lessons {
  id   Int      @id @default(autoincrement())
  desc String?
  date DateTime @default(now())

  single_studentId Int?
  single_student   students? @relation(fields: [single_studentId], references: [id])

  groupsId Int?
  group    groups? @relation(fields: [groupsId], references: [id])
}

model tokens {
  id         Int      @id @default(autoincrement())
  studentsId Int      @unique
  secret     Int
  student    students @relation(fields: [studentsId], references: [id])
}
